let : <IDENTIFIER>
Sum : <IDENTIFIER>
( : (
A : <IDENTIFIER>
) : )
= : <OPERATOR>
Psum : <IDENTIFIER>
( : (
A : <IDENTIFIER>
, : ,
Order : <IDENTIFIER>
A : <IDENTIFIER>
) : )
where : <IDENTIFIER>
rec : <IDENTIFIER>
Psum : <IDENTIFIER>
( : (
T : <IDENTIFIER>
, : ,
N : <IDENTIFIER>
) : )
= : <OPERATOR>
N : <IDENTIFIER>
eq : <IDENTIFIER>
0 : <INTEGER>
-> : <OPERATOR>
0 : <INTEGER>
| : <OPERATOR>
Psum : <IDENTIFIER>
( : (
T : <IDENTIFIER>
, : ,
N : <IDENTIFIER>
- : <OPERATOR>
1 : <INTEGER>
) : )
+ : <OPERATOR>
T : <IDENTIFIER>
N : <IDENTIFIER>
in : <IDENTIFIER>
Print : <IDENTIFIER>
( : (
Sum : <IDENTIFIER>
( : (
1 : <INTEGER>
, : ,
2 : <INTEGER>
, : ,
3 : <INTEGER>
, : ,
4 : <INTEGER>
, : ,
5 : <INTEGER>
) : )
) : )
